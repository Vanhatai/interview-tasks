/**
1.Какие существуют типы данных в ES5? А в ES6?
По спецификации:
	1.Undefined
	2.Null
	3.Boolean
	4.Number
	5.String
	6.Symbol появился в ES6 - является примитивным типом данных, 
	может быть использован для идентификации свойств объекта.
	Поле, ключом которого является symbol нельзя обнаружить с помощью
	Object.keys(myObj), for..in и подобных методов;

	Также используется в метапрограммирование, можно почитать тут:
	https://www.keithcirkel.co.uk/metaprogramming-in-es6-symbols/

	7.Object (does not implement [[Call]])
	8.Object (implements [[Call]])

По реализации:
	1.Undefined
	2.Object (typeof null)
	3.Boolean
	4.Number (typeof Infinity или typeof NaN)
	5.String
	6.Symbol
	7.Object
	8.Function
	9.Скоро внесут в спецификацию - BigInt (typeof 1n). 
	Добавлен был в ES6.



2.В чем разница между host-объектами и нативными объектами?

Нативные объекты — это объекты, которые являются частью языка JavaScript,
определенного в спецификации ECMAScript, такие как String, Math, RegExp, Object, Function и т.д.

Хост-объекты предоставляются средой выполнения, такие как `setTimepot(f,ms)`, `XMLHTTPRequest` и т.д.
Узнать про них можем из спецификации среды выполнения, например W3C.

Деление происходит по признаку описания данных объектов в спецификации EcmaScript.

Еще бывают встроенные и пользовательские объекты, разделение идет по признаку авторства.
parseInt(3.22, 10) - встроенный, так как доступен до выполнения кода.
const obj = { x:5 } - пользовательский, так как инициализируется при запуске и создается явно.

И последнее деление по поведению

Ordinary - объект, который имеет поведение по умолчанию для основных внутренних методов,
которые должны поддерживаться всеми объектами. Его поведение должно определятся обычным в
спецификации. Пример Object.create(null)

Exotic - объект, который не имеет поведения по умолчанию для одного или нескольких основных внутренних методов.
В спецификации должен быть явно указан измененный алгоритм объекта. Пример const arr = [3, 4, 5], либо 
описанный в спецификации https://tc39.es/ecma262/#sec-string-exotic-objects




3.Что такое цикл событий (event loop)? В чем разница между стеком вызовов (call stack) и очередью событий (task queue)?

Цикл событий — это однопоточный цикл, который контролирует стек вызовов и проверяет, есть ли какая-либо работа,
которую необходимо выполнить в очереди задач. Если стек вызовов пуст и в очереди задач есть callback-функции,
то функция удаляется из очереди и помещается в стек вызовов для выполнения.
*/
